$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;
$color-dark-grey: #777;


/* some basic reset */
*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* ! by default box-sizing is not inherited, this way is forcing elements to inherient box-sizing */
    box-sizing: inherit 
}

html {
    /* * so if user changed the default font size (from 16px to something) it can be convered to the right size */
    font-size: 62.5%;
}

/* set the font in the body cause it can be inherited */
body {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: $color-dark-grey;
    padding: 3rem;
    box-sizing: border-box; 
}

/* *you can use css clip path maker online */
.header {
    height: 95vh;
    background-image: linear-gradient(
        to right bottom, 
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)), 
    url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

    position: relative;

    &__logo-box {
        position: absolute;
        left: 4rem;
        top: 4rem;
    
    }
    
    &__logo {
        height: 3.5rem;
    }
    
    /* * legendary way of centering an element */
    &__text-box {
        position: absolute;
        /* these are in relation with the parent element */
        top: 40%;
        left: 50%;
        /* ! this transform property is in relation to the element itself */
        transform: translate(-50%, -50%);
        text-align: center;
    }
}


.heading-primary {
    color: #fff;
    text-transform: uppercase;
    margin-bottom: 6rem;

    &--main {
        display: block;
        font-size: 6rem;
        font-weight: 400;
        letter-spacing: 3.5rem;
        animation: moveInLeft 1s ease-out;
    }
    &--sub {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.73rem;
        animation: moveInRight 1s ease-out;
    }
}


@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translate(-10rem)
    }
    80% { transform: translate(1rem) }
    100% {
        opacity: 1;
        transform: translate(0)
    }
}
@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translate(10rem)
    }
    80% { transform: translate(-1rem) }
    100% {
        opacity: 1;
        transform: translate(0)
    }
}
@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem)
    }
    100% {
        opacity: 1;
        transform: translate(0)
    }
}

.btn {

    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        /* * by default its inline element */
        /* ! its treated as a text, so just use text-align: center */
        display: inline-block; 
        border-radius: 10rem;
        transition: all .2s;
        /* * this relative position is a reference to the absolute position in the after presudo selector */
        position: relative;
        font-size: 1.6rem;
    }
    &:hover {
        transform: translateY(-3px);
        box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2);

        &::after {
            transform: scale(1.4, 1.6);
            opacity: 0;
        }
    }
    &:active {
        transform: translateY(-1px);
        box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .2);
    }
    &--white {
        background-color: #fff;
        color: $color-dark-grey;

        &::after {
            background-color: #fff;
        }
    }
    &::after {
        content: '';
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        /* * absolute position needs to have a reference 'relative */
        position: absolute; 
        top: 0;
        left: 0;
        z-index: -1;
        transition: all .4s;
    }
   
    
    &--animated {
        animation: moveInBottom .5s .75s;
        /* ! set the initial mode at 0% before animation starts */
        animation-fill-mode: backwards;
    }
}

